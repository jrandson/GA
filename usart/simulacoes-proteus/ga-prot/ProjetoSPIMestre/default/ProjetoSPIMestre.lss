
ProjetoSPIMestre.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001c4  00000000  00000000  0000024b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000f7  00000000  00000000  0000040f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000239  00000000  00000000  00000506  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000740  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000123  00000000  00000000  00000760  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000b0  00000000  00000000  00000883  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000933  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  40:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  68:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  6c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  70:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  74:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  78:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  7c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  80:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  84:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  88:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  8c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  90:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  94:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  98:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  9c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  ac:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  bc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  cc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  dc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  e0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec eb       	ldi	r30, 0xBC	; 188
  fc:	f1 e0       	ldi	r31, 0x01	; 1
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
 112:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <_exit>

00000116 <__bad_interrupt>:
 116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <main>:
#define F_CPU 8000000UL  // 8 MHz

int main()
{
//Ajustando os pinos PA0, PA1, PA2 e PA3 como saída
DDRA = 0b00001111;
 11a:	8f e0       	ldi	r24, 0x0F	; 15
 11c:	81 b9       	out	0x01, r24	; 1
PORTA = 0;
 11e:	12 b8       	out	0x02, r1	; 2

//Ajusta os pinos MOSI (PB2) e CLK (PB1) como saída
DDRB = _BV(PB2) | _BV(PB1);
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	84 b9       	out	0x04, r24	; 4

//bit SPE habilita o SPI
//bit MSTR = 1 habilita modo mestre
//bits SPI2X, SPR1 e SPR2 configuram o clock
SPCR = _BV(SPE) | _BV(MSTR) ;
 124:	80 e5       	ldi	r24, 0x50	; 80
 126:	8c bd       	out	0x2c, r24	; 44

//Ajusta os pinos PC0, PC1 e PC2 para saída objetivando 
//o controle SS dos escravos
DDRC = _BV(PC0) | _BV(PC1)| _BV(PC2);
 128:	87 e0       	ldi	r24, 0x07	; 7
 12a:	87 b9       	out	0x07, r24	; 7
PORTC = _BV(PC0) | _BV(PC1)| _BV(PC2);
 12c:	88 b9       	out	0x08, r24	; 8
 12e:	40 e0       	ldi	r20, 0x00	; 0
 130:	34 e0       	ldi	r19, 0x04	; 4
 132:	27 e0       	ldi	r18, 0x07	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 134:	69 e1       	ldi	r22, 0x19	; 25
 136:	70 e0       	ldi	r23, 0x00	; 0
unsigned char k1 = 0,k2 = 4, k3 = 7;

while(1)
{
	//Transmite dados para o escravo 1
	PORTC = PORTC & 0b00000110;
 138:	88 b1       	in	r24, 0x08	; 8
 13a:	86 70       	andi	r24, 0x06	; 6
 13c:	88 b9       	out	0x08, r24	; 8
	SPDR = k1;
 13e:	4e bd       	out	0x2e, r20	; 46
	while (!(SPSR & (1<<SPIF)));
 140:	0d b4       	in	r0, 0x2d	; 45
 142:	07 fe       	sbrs	r0, 7
 144:	fd cf       	rjmp	.-6      	; 0x140 <main+0x26>
	//Recebe dados do escravo 1
	PORTA = SPDR;
 146:	8e b5       	in	r24, 0x2e	; 46
 148:	82 b9       	out	0x02, r24	; 2

	PORTC = PORTC | 0b00000111;
 14a:	88 b1       	in	r24, 0x08	; 8
 14c:	87 60       	ori	r24, 0x07	; 7
 14e:	88 b9       	out	0x08, r24	; 8
 150:	80 e1       	ldi	r24, 0x10	; 16
 152:	97 e2       	ldi	r25, 0x27	; 39
 154:	fb 01       	movw	r30, r22
 156:	31 97       	sbiw	r30, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <main+0x3c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 15a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 15c:	d9 f7       	brne	.-10     	; 0x154 <main+0x3a>

	k1++;
	k1=k1%8;

	//Transmite dados para o escravo 2
	PORTC = PORTC & 0b00000101;
 15e:	88 b1       	in	r24, 0x08	; 8
 160:	85 70       	andi	r24, 0x05	; 5
 162:	88 b9       	out	0x08, r24	; 8
	SPDR = k2;
 164:	3e bd       	out	0x2e, r19	; 46
	while (!(SPSR & (1<<SPIF)));
 166:	0d b4       	in	r0, 0x2d	; 45
 168:	07 fe       	sbrs	r0, 7
 16a:	fd cf       	rjmp	.-6      	; 0x166 <main+0x4c>
	PORTC = PORTC | 0b00000111;
 16c:	88 b1       	in	r24, 0x08	; 8
 16e:	87 60       	ori	r24, 0x07	; 7
 170:	88 b9       	out	0x08, r24	; 8

	//Recebe dados do escravo 2
	PORTA = SPDR;
 172:	8e b5       	in	r24, 0x2e	; 46
 174:	82 b9       	out	0x02, r24	; 2
 176:	80 e1       	ldi	r24, 0x10	; 16
 178:	97 e2       	ldi	r25, 0x27	; 39
 17a:	fb 01       	movw	r30, r22
 17c:	31 97       	sbiw	r30, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <main+0x62>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 180:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 182:	d9 f7       	brne	.-10     	; 0x17a <main+0x60>

	k2++;
	k2=k2%8;

	//Transmite dados para o escravo 3
	PORTC = PORTC & 0b00000011;
 184:	88 b1       	in	r24, 0x08	; 8
 186:	83 70       	andi	r24, 0x03	; 3
 188:	88 b9       	out	0x08, r24	; 8
	SPDR = k3;
 18a:	2e bd       	out	0x2e, r18	; 46
	while (!(SPSR & (1<<SPIF)));
 18c:	0d b4       	in	r0, 0x2d	; 45
 18e:	07 fe       	sbrs	r0, 7
 190:	fd cf       	rjmp	.-6      	; 0x18c <main+0x72>
	PORTC = PORTC | 0b00000111;
 192:	88 b1       	in	r24, 0x08	; 8
 194:	87 60       	ori	r24, 0x07	; 7
 196:	88 b9       	out	0x08, r24	; 8

	//Recebe dados do escravo 3
	PORTA = SPDR;
 198:	8e b5       	in	r24, 0x2e	; 46
 19a:	82 b9       	out	0x02, r24	; 2
 19c:	80 e1       	ldi	r24, 0x10	; 16
 19e:	97 e2       	ldi	r25, 0x27	; 39
 1a0:	fb 01       	movw	r30, r22
 1a2:	31 97       	sbiw	r30, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <main+0x88>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1a6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1a8:	d9 f7       	brne	.-10     	; 0x1a0 <main+0x86>

	PORTC = PORTC | 0b00000111;
	 
	 _delay_ms(1000);

	k1++;
 1aa:	4f 5f       	subi	r20, 0xFF	; 255
	k1=k1%8;
 1ac:	47 70       	andi	r20, 0x07	; 7
	//Recebe dados do escravo 2
	PORTA = SPDR;

	_delay_ms(1000);

	k2++;
 1ae:	3f 5f       	subi	r19, 0xFF	; 255
	k2=k2%8;
 1b0:	37 70       	andi	r19, 0x07	; 7
	//Recebe dados do escravo 3
	PORTA = SPDR;

	_delay_ms(1000);

    k3++;
 1b2:	2f 5f       	subi	r18, 0xFF	; 255
	k3=k3%8;
 1b4:	27 70       	andi	r18, 0x07	; 7
 1b6:	c0 cf       	rjmp	.-128    	; 0x138 <main+0x1e>

000001b8 <_exit>:
 1b8:	f8 94       	cli

000001ba <__stop_program>:
 1ba:	ff cf       	rjmp	.-2      	; 0x1ba <__stop_program>
